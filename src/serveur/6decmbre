typedef struct s_httpRequestStruct
{
    void (*commande)(struct s_httpRequestStruct *);
    char *URL;
    struct reponseRequeteS *rep;
} RequeteStruct;

typedef struct reponseRequeteS
{
    char *contentType;
    char *contentLength;
    int numeroReponse;
    char *contenu;
} reponseRequete;

Requete initialisationStructure()
{
    Requete r = malloc(sizeof(RequeteStruct));
    r->commande = NULL;
    r->URL = NULL;
    r->rep = malloc(sizeof(reponseRequete));
    r->rep->contentType = NULL;
    r->rep->contentLength = NULL;
    r->rep->numeroReponse = 0; //modification here
    r->rep->contenu = NULL;
    return r;
}

/**
 * @brief Permet d'extraire la commande d'une requete HTTP
 * 
 * @param requete l la chaine de caractere
 * @param r la structure qui sauvegardera notre requete
 * @return int 1 est bon autre pas bon
 */
int extractCommande(char *requete, Requete r)
{
    char possibilite[256] = "";
    int err = sscanf(requete, "%s /", possibilite);
    if (err == 1)
    {
        /*on va chercher la bonne commande*/
        /*pour ajouter commande c'est ici*/
        if (!strcmp(possibilite, "GET"))
        {
            r->commande = commandeGet;
        }
        else
        {
            err = 0;
        }
    }
    return err;
}

int extraitFichier(char *requete, Requete r)
{
    char com[256] = "";
    char prev[256] = "";
    int err = sscanf(requete, "%s /%s HTTP/", prev, com);
    //que faire en cas de juste /
    r->URL = malloc(sizeof(char) * (strlen(com) + 1));
    strcpy(r->URL, com);
    
    return err;
}

//mettre en place des define pour verifier le protocole plus simple
//faire un truc avec le numero du protocle ?
int verifProtocol(char *requete)
{
    char rep[256] = ""; //modification here
    char aze[256] = "";
    char aze2[256] = "";
    char all[256] = "";
    int err = 0;
    err = sscanf(requete, "%s %s HTTP/%s %[^\n]", aze, aze2, rep, all);
    //modification here
    if (err == 3 && (!strcmp(rep, "0.9") || !strcmp(rep, "1.0") || !strcmp(rep, "1.1") || !strcmp(rep, "2.0")))
    {
        return 1;
    }

    return 0;
}

//possiblement mettre en place une grande initilisaiton pour rendre le code plus propre
//mettre en place des defines
Requete annalyseRequete(char *requete)
{
    /*Allocation de la mÃ©moire dans la heap*/
    Requete r = initialisationStructure();

    if (!verifProtocol(requete))
    {
        fprintf(stderr, "400 Bad Request\n");//modification here
        r->rep->numeroReponse=400;
        free(r);
        return NULL;
    }
    /*extraction de la commande*/
    if (extractCommande(requete, r) != 1)
    {
        fprintf(stderr, "400 Bad Request\n");//modification here
        r->rep->numeroReponse=400;
        free(r);
        return NULL;
    }

    if (extraitFichier(requete, r) != 2)
    {
        fprintf(stderr, "404 not found\n");//modification here
        //possiblement enlever ca d'ici
        r->rep->numeroReponse=404;
        free(r);
        return NULL;
    }

    return r;
}
size_t longeurFichier(Requete r)
{
    FILE *file;
    int size = 0;
    if ((file = fopen(r->URL, "r")) == NULL)
    {
        //ici mettre en place erreur 404 
        r->rep->numeroReponse=404;
        return 0;
    }

    fseek(file, 0, SEEK_END);

    size = ftell(file);

    if (fclose(file) == EOF)
    {   
        r->rep->numeroReponse=500;
        return 0;
    }

    return size;
}